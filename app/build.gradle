apply plugin: 'com.android.application'
//apply plugin: 'com.neenbedankt.android-apt' rm after 3.0.0

android {
  compileSdkVersion 26
  def currentVersion = getVersionCode()
  defaultConfig {
    applicationId "com.goubaa.harry.nightplus"
    minSdkVersion 17
    targetSdkVersion 26
    versionCode currentVersion
    versionName "1.0.0"
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  signingConfigs {
    debug {
    }
    release {
      storeFile
      storePassword
      keyAlias
      keyPassword
    }
  }
  //
  getSigningProperties()

  buildTypes {
    release {
      minifyEnabled true
      zipAlignEnabled true
      shrinkResources true
      signingConfig signingConfigs.release
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
    debug {
      debuggable true
    }
  }
  sourceSets {
    main {
      assets.srcDirs = ['src/main/assets', 'src/main/assets/fonts']
      res.srcDirs = ['src/main/res', 'src/main/res/values-v19']
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

/**
 * getSigningProperties 配置key
 * @return
 */
def getSigningProperties() {
  def propFile = file('signing.properties')
  if (propFile.canRead()) {
    Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
      props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
      android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
      android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
      android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
      android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
      println 'signing.properties found but some entries are missing'
      android.buildTypes.release.signingConfig = null
    }
  } else {
    println 'file signing.properties not found'
    android.buildTypes.release.signingConfig = null
  }
}

/**
 * getVersionCode 获取版本号
 * @return
 */
def getVersionCode() {
  def versionFile = file('version.properties')
  if (versionFile.canRead()) {
    Properties props = new Properties()
    props.load(new FileInputStream(versionFile))
    def versionCode = props['VERSION_CODE'].toInteger()
    def runTask = gradle.startParameter.taskNames
    if ('assembleRelease' in runTask) {
      props['VERSION_CODE'] = (++versionCode).toString()
      props.store(versionFile.newWriter(), null)
      return versionCode
    }
  } else {
    throw new GradleException("bersion.properties file not found")
  }
}


dependencies {
  api fileTree(include: ['*.jar'], dir: 'libs')

  api project(':banner')

  api 'com.android.support:appcompat-v7:26.1.0'
  api 'com.android.support.constraint:constraint-layout:1.0.2'
  api 'com.android.support:support-v4:26.1.0'
  api 'com.android.support:design:26.1.0'

  testImplementation 'junit:junit:4.12'

  androidTestImplementation 'com.android.support.test:runner:1.0.1'
  androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

  // butter knife
  api 'com.jakewharton:butterknife:8.8.1'
  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
  // RxJAVA
  api 'io.reactivex.rxjava2:rxjava:2.1.1'
  api 'io.reactivex.rxjava2:rxandroid:2.0.1'
  api 'com.squareup.retrofit2:retrofit:2.3.0'
  api 'com.squareup.retrofit2:converter-gson:2.3.0'
  api 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
  api 'com.squareup.okhttp3:logging-interceptor:3.8.1'
  // RxLifecycle
  api 'com.trello.rxlifecycle2:rxlifecycle-components:2.1.0'
  // BottomBar
//  api 'com.roughike:bottom-bar:2.3.1'
  // banner
//  api 'com.youth.banner:banner:1.4.10'
  // refresh
  api 'in.srain.cube:ultra-ptr:1.0.11'
  // tags
  api 'co.lujun:androidtagview:1.1.4'
  // blur
  api 'jp.wasabeef:blurry:2.1.1'
  // picasso
  api 'com.squareup.picasso:picasso:2.5.2'
  api 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'
  // permission dispatcher
  api("com.github.hotchemi:permissionsdispatcher:${'3.1.0'}") {
    // if you don't use android.app.Fragment you can exclude support for them
    // exclude module: "support-v13"
  }
  annotationProcessor "com.github.hotchemi:permissionsdispatcher-processor:${'3.1.0'}"
}
